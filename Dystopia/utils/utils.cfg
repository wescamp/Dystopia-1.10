#define IFTRUE VARIABLE THEN ELSE
	[if]
		[variable]
			name={VARIABLE}
			equals=yes
		[/variable]
		[then]
			{THEN}
		[/then]
		[else]
			{ELSE}
		[/else]
	[/if]
#enddef

#define ALLDIE_SIDE SIDE THEN
	[event]
	name=die
	first_time_only=no
		[filter]
			side={SIDE}
		[/filter]
		[if]
			[have_unit]
				side={SIDE}
			[/have_unit]
			[else]
				{THEN}
			[/else]
		[/if]
	[/event]
#enddef

#define IFVAR VARIABLE DOES SOMETHING THEN
	[if]
		[variable]
			name={VARIABLE}
			{DOES}={SOMETHING}
		[/variable]
		[then]
			{THEN}
		[/then]
	[/if]
#enddef

#define IFVAR_ELSE VARIABLE DOES SOMETHING THEN ELSE
	[if]
		[variable]
			name={VARIABLE}
			{DOES}={SOMETHING}
		[/variable]
		[then]
			{THEN}
		[/then]
		[else]
			{ELSE}
		[/else]
	[/if]
#enddef

#define FORCE_SHAMANS
	[event]
	name=side 5 turn
	first_time_only=no
		[store_unit]
			[filter]
				type=Elvish Shaman
			[/filter]
			variable=tomove
		[/store_unit]
		{FOREACH tomove i}
			[store_unit]
				[filter]
					side=4
					[not]
						id=Galdrad
						[or]
							id=Delion
						[/or]
						[or]
							[filter_adjacent]
								count=3-6
							[/filter_adjacent]
						[/or]
					[/not]
					[filter_location]
						x,y=$tomove[$i].x,$tomove[$i].y
						radius=$tomove[$i].max_moves
					[/filter_location]
				[/filter]
				variable=possible_toheal
			[/store_unit]
			{IFVAR possible_toheal.length greater_than_equals_to 1 (
			[set_variable]
				variable=chooser
				rand="0..$($possible_toheal.length - 1)"
			[/set_variable])}
			# workaround
		[if]
			[variable]
				variable=possible_toheal.length
				greater_than_equals_to=1
			[/variable]
			[then]
			[if]
				[have_unit]
					x="$($possible_toheal[$chooser].x + 1)"
					y="$($possible_toheal[$chooser].y + 1)"
				[/have_unit]
				[then]
					[if]
						[have_unit]
							x="$($possible_toheal[$chooser].x - 1)"
							y="$($possible_toheal[$chooser].y + 1)"
						[/have_unit]
						[then]
							[if]
								[have_unit]
									x="$($possible_toheal[$chooser].x - 1)"
									y="$($possible_toheal[$chooser].y - 1)"
								[/have_unit]
								[then]
									[if]
										[have_unit]
											x="$($possible_toheal[$chooser].x - 1)"
											y=$possible_toheal[$chooser].y
										[/have_unit]
										[then]
											[if]
												[have_unit]
													x="$($possible_toheal[$chooser].x + 1)"
													y=$possible_toheal[$chooser].y
												[/have_unit]
												[then]
													[if]
														[have_unit]
															x=$possible_toheal[$chooser].x
															y="$($possible_toheal[$chooser].y - 1)"
														[/have_unit]
														[else]
															[set_variable]
																name=destination.x
																value=$possible_toheal[$chooser].x
															[/set_variable]
															[set_variable]
																name=destination.y
																value="$($possible_toheal[$chooser].y - 1)"
															[/set_variable]
														[/else]	
													[/if]
												[/then]
												[else]
													[set_variable]
														name=destination.x
														value="$($possible_toheal[$chooser].x + 1)"
													[/set_variable]
													[set_variable]
														name=destination.y
														value=$possible_toheal[$chooser].y
													[/set_variable]
												[/else]	
											[/if]
										[/then]
										[else]
											[set_variable]
												name=destination.x
												value="$($possible_toheal[$chooser].x - 1)"
											[/set_variable]
											[set_variable]
												name=destination.y
												value=$possible_toheal[$chooser].y
											[/set_variable]
										[/else]
									[/if]									
								[/then]
								[else]
									[set_variable]
										name=destination.x
										value=$possible_toheal[$chooser].x
									[/set_variable]
									[set_variable]
										name=destination.y
										value="$($possible_toheal[$chooser].y + 1)"
									[/set_variable]
								[/else]
							[/if]
						[/then]
						[else]
							[set_variable]
								name=destination.x
								value="$($possible_toheal[$chooser].x - 1)"
							[/set_variable]
							[set_variable]
								name=destination.y
								value="$($possible_toheal[$chooser].y + 1)"
							[/set_variable]
						[/else]	
					[/if]
				[/then]
				[else]
					[set_variable]
						name=destination.x
						value="$($possible_toheal[$chooser].x + 1)"
					[/set_variable]
					[set_variable]
						name=destination.y
						value="$($possible_toheal[$chooser].y + 1)"
					[/set_variable]
				[/else]
			[/if]
         		[move_unit]
            			x,y=$tomove[$i].x,$tomove[$i].y
            			to_x=$destination.x
           			to_y=$destination.y
         		[/move_unit]
			[modify_unit]
				[filter]
					find_in=tomove[$i]
				[/filter]
				moves=0
			[/modify_unit]
			{CLEAR_VARIABLE destination}
			{CLEAR_VARIABLE chooser}
			[/then]
		[/if]
			{CLEAR_VARIABLE possible_toheal}
		{NEXT i}
		{CLEAR_VARIABLE tomove}
	[/event]
#enddef
#define RETURN_TO_CASTLE SIDE FILTER RADIUS COUNT LOC
	[event]
	name=side {SIDE} turn
	first_time_only=no
		[store_unit]
			[filter]
				side={SIDE}
			[/filter]
			variable=units
		[/store_unit]
		{FOREACH units i}
			[store_unit]
				[filter]
					{FILTER}
					[filter_location]
						x,y=$tomove[$i].x,$tomove[$i].y
						radius={RADIUS}
					[/filter_location]
				[/filter]
				variable=enemies_in_range
			[/store_unit]
			{IFVAR_ELSE enemies_in_range.length greater_than_equals_to {COUNT} (
   			{MODIFY_AI_ADD_CANDIDATE_ACTION ({SIDE}) main_loop (
     				[candidate_action]
      					id=return_to_castle
      					engine=fai
     					name=return_to_castle
      					type=movement
      					evaluation="if(unit_at(next_hop(me.loc,loc({LOC})))=null, {AI_CA_COMBAT_SCORE}+10 ,0)"     
      					action="move(me.loc,next_hop(me.loc,loc({LOC})))"
     				[/candidate_action]
   			)}) (
			{MODIFY_AI_DELETE_CANDIDATE_ACTION ({SIDE}) main_loop return_to_castle})}
			{CLEAR_VARIABLE enemies_in_range}
		{NEXT i}
		{CLEAR_VARIABLE tomove}
	[/event]
#enddef